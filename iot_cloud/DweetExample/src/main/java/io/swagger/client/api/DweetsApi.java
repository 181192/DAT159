/*
 * dweet.io
 * Dweet.io allows users to share data from mobile, tablets, and pcs, and them to other devices and accounts across social media platforms. Dweet.io provides an API to access the different functionality of the Dweet.io service. Users can make REST calls to read and create dweets, lock and unlock things, and perform other calls. The API returns JSON and JSONP.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DweetsApi {
    private ApiClient apiClient;

    public DweetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DweetsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for dweetForThingPost
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dweetForThingPostCall(String thing, String content, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/dweet/for/{thing}"
            .replaceAll("\\{" + "thing" + "\\}", apiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dweetForThingPostValidateBeforeCall(String thing, String content, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling dweetForThingPost(Async)");
        }
        
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling dweetForThingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = dweetForThingPostCall(thing, content, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a dweet for a thing.
     * 
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void dweetForThingPost(String thing, String content, String key) throws ApiException {
        dweetForThingPostWithHttpInfo(thing, content, key);
    }

    /**
     * Create a dweet for a thing.
     * 
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> dweetForThingPostWithHttpInfo(String thing, String content, String key) throws ApiException {
        com.squareup.okhttp.Call call = dweetForThingPostValidateBeforeCall(thing, content, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a dweet for a thing. (asynchronously)
     * 
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dweetForThingPostAsync(String thing, String content, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dweetForThingPostValidateBeforeCall(thing, content, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for dweetQuietlyForThingPost
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dweetQuietlyForThingPostCall(String thing, String content, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/dweet/quietly/for/{thing}"
            .replaceAll("\\{" + "thing" + "\\}", apiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dweetQuietlyForThingPostValidateBeforeCall(String thing, String content, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling dweetQuietlyForThingPost(Async)");
        }
        
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling dweetQuietlyForThingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = dweetQuietlyForThingPostCall(thing, content, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a dweet for a thing.  This method differs from /dweet/for/{thing} only in that successful dweets result in an HTTP 204 response rather than the typical verbose response.
     * 
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void dweetQuietlyForThingPost(String thing, String content, String key) throws ApiException {
        dweetQuietlyForThingPostWithHttpInfo(thing, content, key);
    }

    /**
     * Create a dweet for a thing.  This method differs from /dweet/for/{thing} only in that successful dweets result in an HTTP 204 response rather than the typical verbose response.
     * 
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> dweetQuietlyForThingPostWithHttpInfo(String thing, String content, String key) throws ApiException {
        com.squareup.okhttp.Call call = dweetQuietlyForThingPostValidateBeforeCall(thing, content, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a dweet for a thing.  This method differs from /dweet/for/{thing} only in that successful dweets result in an HTTP 204 response rather than the typical verbose response. (asynchronously)
     * 
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dweetQuietlyForThingPostAsync(String thing, String content, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dweetQuietlyForThingPostValidateBeforeCall(thing, content, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDweetsForThingGet
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDweetsForThingGetCall(String thing, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/dweets/for/{thing}"
            .replaceAll("\\{" + "thing" + "\\}", apiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDweetsForThingGetValidateBeforeCall(String thing, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling getDweetsForThingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getDweetsForThingGetCall(thing, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read the last 5 cached dweets for a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getDweetsForThingGet(String thing, String key) throws ApiException {
        getDweetsForThingGetWithHttpInfo(thing, key);
    }

    /**
     * Read the last 5 cached dweets for a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getDweetsForThingGetWithHttpInfo(String thing, String key) throws ApiException {
        com.squareup.okhttp.Call call = getDweetsForThingGetValidateBeforeCall(thing, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Read the last 5 cached dweets for a thing. (asynchronously)
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDweetsForThingGetAsync(String thing, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDweetsForThingGetValidateBeforeCall(thing, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getLatestDweet
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLatestDweetCall(String thing, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/latest/dweet/for/{thing}"
            .replaceAll("\\{" + "thing" + "\\}", apiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLatestDweetValidateBeforeCall(String thing, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling getLatestDweet(Async)");
        }
        

        com.squareup.okhttp.Call call = getLatestDweetCall(thing, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read the latest dweet for a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getLatestDweet(String thing, String key) throws ApiException {
        getLatestDweetWithHttpInfo(thing, key);
    }

    /**
     * Read the latest dweet for a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getLatestDweetWithHttpInfo(String thing, String key) throws ApiException {
        com.squareup.okhttp.Call call = getLatestDweetValidateBeforeCall(thing, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Read the latest dweet for a thing. (asynchronously)
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLatestDweetAsync(String thing, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLatestDweetValidateBeforeCall(thing, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listenForDweets
     * @param thing  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenForDweetsCall(String thing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listen/for/dweets/from/{thing}"
            .replaceAll("\\{" + "thing" + "\\}", apiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenForDweetsValidateBeforeCall(String thing, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling listenForDweets(Async)");
        }
        

        com.squareup.okhttp.Call call = listenForDweetsCall(thing, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Listen for dweets from a thing.
     * Sorry, this function uses HTTP chunked responses and cannot be tested here. Try something like: &lt;pre&gt;curl --raw https://dweet.io/listen/for/dweets/from/{thing}&lt;/pre&gt;
     * @param thing  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void listenForDweets(String thing) throws ApiException {
        listenForDweetsWithHttpInfo(thing);
    }

    /**
     * Listen for dweets from a thing.
     * Sorry, this function uses HTTP chunked responses and cannot be tested here. Try something like: &lt;pre&gt;curl --raw https://dweet.io/listen/for/dweets/from/{thing}&lt;/pre&gt;
     * @param thing  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> listenForDweetsWithHttpInfo(String thing) throws ApiException {
        com.squareup.okhttp.Call call = listenForDweetsValidateBeforeCall(thing, null, null);
        return apiClient.execute(call);
    }

    /**
     * Listen for dweets from a thing. (asynchronously)
     * Sorry, this function uses HTTP chunked responses and cannot be tested here. Try something like: &lt;pre&gt;curl --raw https://dweet.io/listen/for/dweets/from/{thing}&lt;/pre&gt;
     * @param thing  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenForDweetsAsync(String thing, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenForDweetsValidateBeforeCall(thing, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
