/*
 * dweet.io
 * Dweet.io allows users to share data from mobile, tablets, and pcs, and them to other devices and accounts across social media platforms. Dweet.io provides an API to access the different functionality of the Dweet.io service. Users can make REST calls to read and create dweets, lock and unlock things, and perform other calls. The API returns JSON and JSONP.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageApi {
    private ApiClient apiClient;

    public StorageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getStoredAlerts
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param date The calendar date (YYYY-MM-DD) from which you&#39;d like to start your query.  The response will be a maximum of one day. (required)
     * @param hour The hour of the day represented in the date parameter in 24-hour (00-23) format.  If this parameter is included, a maximum of 1 hour will be returned starting at this hour. (optional)
     * @param responseType Current valid parameters for this are &#39;csv&#39; and &#39;json&#39;.  If this parameter is left blank, all responses default to hapi-json dweet-speak. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoredAlertsCall(String thing, String key, String date, String hour, String responseType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/stored/alerts/for/{thing}"
            .replaceAll("\\{" + "thing" + "\\}", apiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (hour != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hour", hour));
        if (responseType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("responseType", responseType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoredAlertsValidateBeforeCall(String thing, String key, String date, String hour, String responseType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling getStoredAlerts(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getStoredAlerts(Async)");
        }
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getStoredAlerts(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoredAlertsCall(thing, key, date, hour, responseType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read all the saved alerts for a thing from long term storage.  You can query a maximum of 1 day per request and a granularly of 1 hour.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param date The calendar date (YYYY-MM-DD) from which you&#39;d like to start your query.  The response will be a maximum of one day. (required)
     * @param hour The hour of the day represented in the date parameter in 24-hour (00-23) format.  If this parameter is included, a maximum of 1 hour will be returned starting at this hour. (optional)
     * @param responseType Current valid parameters for this are &#39;csv&#39; and &#39;json&#39;.  If this parameter is left blank, all responses default to hapi-json dweet-speak. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getStoredAlerts(String thing, String key, String date, String hour, String responseType) throws ApiException {
        getStoredAlertsWithHttpInfo(thing, key, date, hour, responseType);
    }

    /**
     * Read all the saved alerts for a thing from long term storage.  You can query a maximum of 1 day per request and a granularly of 1 hour.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param date The calendar date (YYYY-MM-DD) from which you&#39;d like to start your query.  The response will be a maximum of one day. (required)
     * @param hour The hour of the day represented in the date parameter in 24-hour (00-23) format.  If this parameter is included, a maximum of 1 hour will be returned starting at this hour. (optional)
     * @param responseType Current valid parameters for this are &#39;csv&#39; and &#39;json&#39;.  If this parameter is left blank, all responses default to hapi-json dweet-speak. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getStoredAlertsWithHttpInfo(String thing, String key, String date, String hour, String responseType) throws ApiException {
        com.squareup.okhttp.Call call = getStoredAlertsValidateBeforeCall(thing, key, date, hour, responseType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Read all the saved alerts for a thing from long term storage.  You can query a maximum of 1 day per request and a granularly of 1 hour. (asynchronously)
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param date The calendar date (YYYY-MM-DD) from which you&#39;d like to start your query.  The response will be a maximum of one day. (required)
     * @param hour The hour of the day represented in the date parameter in 24-hour (00-23) format.  If this parameter is included, a maximum of 1 hour will be returned starting at this hour. (optional)
     * @param responseType Current valid parameters for this are &#39;csv&#39; and &#39;json&#39;.  If this parameter is left blank, all responses default to hapi-json dweet-speak. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoredAlertsAsync(String thing, String key, String date, String hour, String responseType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoredAlertsValidateBeforeCall(thing, key, date, hour, responseType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getStoredDweetsForThingGet
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param date The calendar date (YYYY-MM-DD) from which you&#39;d like to start your query.  The response will be a maximum of one day. (required)
     * @param hour The hour of the day represented in the date parameter in 24-hour (00-23) format.  If this parameter is included, a maximum of 1 hour will be returned starting at this hour. (optional)
     * @param responseType Current valid parameters for this are &#39;csv&#39; and &#39;json&#39;.  If this parameter is left blank, all responses default to hapi-json dweet-speak. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoredDweetsForThingGetCall(String thing, String key, String date, String hour, String responseType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/stored/dweets/for/{thing}"
            .replaceAll("\\{" + "thing" + "\\}", apiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (hour != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hour", hour));
        if (responseType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("responseType", responseType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoredDweetsForThingGetValidateBeforeCall(String thing, String key, String date, String hour, String responseType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling getStoredDweetsForThingGet(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getStoredDweetsForThingGet(Async)");
        }
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getStoredDweetsForThingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoredDweetsForThingGetCall(thing, key, date, hour, responseType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read all the saved dweets for a thing from long term storage.  You can query a maximum of 1 day per request and a granularly of 1 hour.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param date The calendar date (YYYY-MM-DD) from which you&#39;d like to start your query.  The response will be a maximum of one day. (required)
     * @param hour The hour of the day represented in the date parameter in 24-hour (00-23) format.  If this parameter is included, a maximum of 1 hour will be returned starting at this hour. (optional)
     * @param responseType Current valid parameters for this are &#39;csv&#39; and &#39;json&#39;.  If this parameter is left blank, all responses default to hapi-json dweet-speak. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getStoredDweetsForThingGet(String thing, String key, String date, String hour, String responseType) throws ApiException {
        getStoredDweetsForThingGetWithHttpInfo(thing, key, date, hour, responseType);
    }

    /**
     * Read all the saved dweets for a thing from long term storage.  You can query a maximum of 1 day per request and a granularly of 1 hour.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param date The calendar date (YYYY-MM-DD) from which you&#39;d like to start your query.  The response will be a maximum of one day. (required)
     * @param hour The hour of the day represented in the date parameter in 24-hour (00-23) format.  If this parameter is included, a maximum of 1 hour will be returned starting at this hour. (optional)
     * @param responseType Current valid parameters for this are &#39;csv&#39; and &#39;json&#39;.  If this parameter is left blank, all responses default to hapi-json dweet-speak. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getStoredDweetsForThingGetWithHttpInfo(String thing, String key, String date, String hour, String responseType) throws ApiException {
        com.squareup.okhttp.Call call = getStoredDweetsForThingGetValidateBeforeCall(thing, key, date, hour, responseType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Read all the saved dweets for a thing from long term storage.  You can query a maximum of 1 day per request and a granularly of 1 hour. (asynchronously)
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param date The calendar date (YYYY-MM-DD) from which you&#39;d like to start your query.  The response will be a maximum of one day. (required)
     * @param hour The hour of the day represented in the date parameter in 24-hour (00-23) format.  If this parameter is included, a maximum of 1 hour will be returned starting at this hour. (optional)
     * @param responseType Current valid parameters for this are &#39;csv&#39; and &#39;json&#39;.  If this parameter is left blank, all responses default to hapi-json dweet-speak. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoredDweetsForThingGetAsync(String thing, String key, String date, String hour, String responseType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoredDweetsForThingGetValidateBeforeCall(thing, key, date, hour, responseType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
