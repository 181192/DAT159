/*
 * dweet.io
 * Dweet.io allows users to share data from mobile, tablets, and pcs, and them to other devices and accounts across social media platforms. Dweet.io provides an API to access the different functionality of the Dweet.io service. Users can make REST calls to read and create dweets, lock and unlock things, and perform other calls. The API returns JSON and JSONP.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertsApi {
    private ApiClient apiClient;

    public AlertsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAlertGET
     * @param who A comma separated list of Email addresses to send the alert to. (required)
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param condition A condition that returns a string or a true value if a condition is met. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAlertGETCall(String who, String thing, String condition, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alert/{who}/when/{thing}/{condition}"
            .replaceAll("\\{" + "who" + "\\}", apiClient.escapeString(who.toString()))
            .replaceAll("\\{" + "thing" + "\\}", apiClient.escapeString(thing.toString()))
            .replaceAll("\\{" + "condition" + "\\}", apiClient.escapeString(condition.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAlertGETValidateBeforeCall(String who, String thing, String condition, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'who' is set
        if (who == null) {
            throw new ApiException("Missing the required parameter 'who' when calling createAlertGET(Async)");
        }
        
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling createAlertGET(Async)");
        }
        
        // verify the required parameter 'condition' is set
        if (condition == null) {
            throw new ApiException("Missing the required parameter 'condition' when calling createAlertGET(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling createAlertGET(Async)");
        }
        

        com.squareup.okhttp.Call call = createAlertGETCall(who, thing, condition, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an alert for a thing. A thing must be locked before an alert can be set.
     * 
     * @param who A comma separated list of Email addresses to send the alert to. (required)
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param condition A condition that returns a string or a true value if a condition is met. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createAlertGET(String who, String thing, String condition, String key) throws ApiException {
        createAlertGETWithHttpInfo(who, thing, condition, key);
    }

    /**
     * Create an alert for a thing. A thing must be locked before an alert can be set.
     * 
     * @param who A comma separated list of Email addresses to send the alert to. (required)
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param condition A condition that returns a string or a true value if a condition is met. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createAlertGETWithHttpInfo(String who, String thing, String condition, String key) throws ApiException {
        com.squareup.okhttp.Call call = createAlertGETValidateBeforeCall(who, thing, condition, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create an alert for a thing. A thing must be locked before an alert can be set. (asynchronously)
     * 
     * @param who A comma separated list of Email addresses to send the alert to. (required)
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param condition A condition that returns a string or a true value if a condition is met. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAlertGETAsync(String who, String thing, String condition, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAlertGETValidateBeforeCall(who, thing, condition, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAlert
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAlertCall(String thing, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/alert/for/{thing}"
            .replaceAll("\\{" + "thing" + "\\}", apiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAlertValidateBeforeCall(String thing, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling getAlert(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getAlert(Async)");
        }
        

        com.squareup.okhttp.Call call = getAlertCall(thing, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the alert attached to a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getAlert(String thing, String key) throws ApiException {
        getAlertWithHttpInfo(thing, key);
    }

    /**
     * Get the alert attached to a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getAlertWithHttpInfo(String thing, String key) throws ApiException {
        com.squareup.okhttp.Call call = getAlertValidateBeforeCall(thing, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the alert attached to a thing. (asynchronously)
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAlertAsync(String thing, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAlertValidateBeforeCall(thing, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeAlert
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeAlertCall(String thing, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/remove/alert/for/{thing}"
            .replaceAll("\\{" + "thing" + "\\}", apiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeAlertValidateBeforeCall(String thing, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling removeAlert(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling removeAlert(Async)");
        }
        

        com.squareup.okhttp.Call call = removeAlertCall(thing, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove an alert for a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeAlert(String thing, String key) throws ApiException {
        removeAlertWithHttpInfo(thing, key);
    }

    /**
     * Remove an alert for a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeAlertWithHttpInfo(String thing, String key) throws ApiException {
        com.squareup.okhttp.Call call = removeAlertValidateBeforeCall(thing, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove an alert for a thing. (asynchronously)
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeAlertAsync(String thing, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeAlertValidateBeforeCall(thing, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
